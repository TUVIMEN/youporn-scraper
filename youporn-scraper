#!/bin/bash
# by Dominik Stanis≈Çaw Suchora <suchora.dominik7@gmail.com>
# License: GNU GPLv3

ucurl() {
    curl -L -g -s --user-agent 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.15.2 Chrome/87.0.4280.144 Safari/537.36' -H 'Accept-Encoding: gzip, deflate' --compressed -H 'Cookie: local_storage=1; age_verified=1' "$@"
}

declare threads='4' dir='.' cookie_t
declare -r arg0="$(basename "$0")"

usage() {
    printf '%s [OPTION...] [DIR]\n' "$(basename "$0")"
    printf "Archive youporn videos, channels, pornstars metadata in json from its sitemap.\n"
    printf "Type of page depends on [-pvc] options.\n"
    printf "Pages will be saved in files named by their sha256 hash of urls and placed in DIR.\n\n"
    printf "Options:\n"
    printf "  -t NUM\tset number of used threads, by default set to 4\n"
    printf "  -p\t\tpornstars\n"
    printf "  -v\t\tvideos\n"
    printf "  -c\t\tchannels\n"
    printf "  -h\t\tshow help\n"
}

get_v_json() {
    local -r url="$1"
    local -r t="$(ucurl -c "$cookie_t" "$1" | tr -d '\n\r\t')"
    local _tmp1 _tmp2 _tmp3 id
    {
    id="${1##*watch/}"
    id="${id%%/*}"
    echo "$id" #id
    echo "$1" #link
    reliq '
        . meta +property="og:title" +content | "%(content)v\n",
        . div .watch-metadata; * .tm_rating_percent | "%i\n",
        . div .action-section m@">Views</span>"; span .infoValue | "%i\n",
        . div #metaDataPornstarInfo; a href m@v>"<img" | "%(href)v\t" / echo "" "\n",
        . div #metaDataPornstarInfo; a href m@v>"<img"; * c@[0] | "%i\t" / echo "" "\n",
        . div #showMoreUnderplayerInfoBox; div .video-featured; span | "%i\n",
        . div #showMoreUnderplayerInfoBox; div .video-uploaded; span | "%i\n",
        . div .video-uploaderInfoPanel; a m@v>"<img" href | "%(href)v\n" / line [1],
        . div .video-uploaderInfoPanel; a m@v>"<img" href | "%i\n" / line [1],
        . div .jump-to-action-carousel; * data-seconds | "%(data-seconds)v;%i\t" / tr "\n" sed "s/<[^>]*>[^<]*<[^>]*>//g;s/ \t/\t/g" echo "" "\n",
        . meta property="og:image" content | "%(content)v\n",
        . meta property=og:video:width content | "%(content)vx", meta property=og:video:height content | "%(content)v\n",
        . meta property=video:duration content | "%(content)v\n",
        . div .videoTags; a .button href=b>"/category/" | "%i\t" / echo "" "\n",
        . div .videoTags; a .button href=b>"/porntags/" | "%i\t" / echo "" "\n"
    ' <<< "$t"
    } | jq -RnMc '
        .["id"]=input |
        .["link"]=input |
        .["title"]=input |
        .["likes_ratio"]=input |
        .["views"]=input |
        .["pornstar_links"]=(input | split("\t"))[:-1] |
        .["pornstars"]=(input | split("\t"))[:-1] |
        .["featured"]=input |
        .["uploaded"]=input |
        .["channel_link"]=input |
        .["channel"]=input |
        .["actions"]=((input | split("\t"))[:-1] | map(split(";") | {
            ("moment"):.[0],
            ("name"):.[1]
        })) |
        .["thumbnail"]=input |
        .["resolution"]=input |
        .["duration"]=input |
        .["categories"]=(input | split("\t"))[:-1] |
        .["tags"]=(input | split("\t"))[:-1]'
}

get_p_json() {
    local -r t="$(ucurl "$1" | tr -d '\n\t\r\a')"
    {
    echo "$1" #link
    reliq '
        . h1 .porn-star-name | "%i\n",
        . div .pornstar-image-wrapper; img data-src | "%(data-src)v\n",
        . div .porn-star-stats; span m@vB>"[A-Z]" | "%i\n" / sed "s/^ *//;s/ *$//;s/,//g",
        . div .porn-star-info-bottom; E>(span|label) | "%i\n" / sed ":x; N;s/\n//; $!{N;s/\n/\t/;bx}",
        . div .subscribers-count; span .count | "%i\n",
        . div .js_related_pornstars .carousel-wrapper; a title | "%(title)v\t" / echo "" "\n",
        . div .js_related_channels .carousel-wrapper; span .channelTitle | "%i\t" / echo "" "\n",
        . div .related-searches; a href | "%i\t" / echo "" "\n"
    ' <<< "$t"
    } | jq -RnMc '
        .["link"]=input |
        .["name"]=input |
        .["image"]=input |
        .["rank"]=input |
        .["videos"]=input |
        .["views"]=input |
        .["info_pieces"]=(input | split("\t") | map(split(":") | {
            ("key"):.[0],
            ("value"):.[1]
        })) |
        .["subscribers"]=input |
        .["related_pornstars"]=((input | split("\t"))[:-1]) |
        .["related_channels"]=((input | split("\t"))[:-1]) |
        .["related_searches"]=((input | split("\t"))[:-1])'
}

get_c_json() {
    local -r t="$(ucurl "$1" | tr -d '\n\t\r\a')"
    local _tmp1
    {
    echo "$1" #link
    reliq '
        . h1 .title-text | "%i\n" / sed "s/ *<.*//",
        . div .channel-description; p | "%i\n",
        div .channel-contentWrapper; div class=E>"(info-metrics|rank)" | "%i\n" / tr ","
    ' <<< "$t"
    } | jq -RnMc '
        .["link"]=input |
        .["name"]=input |
        .["description"]=input |
        .["rank"]=input |
        .["videos"]=input |
        .["views"]=input |
        .["subscribers"]=input'
}

[ "$#" -eq '0' ] && { usage >&2; exit 1; }

while [ "$#" -gt 0 ]
do
    case "$1" in
        -t) threads="$2"; shift;;
        -p) pattern='pornstars'; func='get_p_json';;
        -v) pattern='video'; func='get_v_json';;
        -c) pattern='channels'; func='get_c_json';;
        -h) usage; exit 0;;
        -*) printf '%s: invalid argument -- %s\n' "$(basename "$0")" "$1" >&2; exit 1;;
        *) dir="$1";;
    esac
    shift
done

[ -z "$pattern" ] && { printf '%s: No option specified the type of pages\n' "$(basename "$0")" >&2; exit 1; }
cd "$dir" || exit 1

cookie_t="$(mktemp)"
trap 'rm "$cookie_t"; exit' EXIT

for i in $(ucurl 'https://www.youporn.com/sitemap.xml' | reliq 'loc m@B>"/sitemap-'"$pattern"'.*\.xml" | "%i\n"')
do
    for j in $(ucurl "$i" | reliq 'loc | "%i\n"')
    do
        [ "$(jobs | wc -l)" -gt "$threads" ] && wait %%
        rh="$(sha256sum <<< "$j")"
        rn="${rh%  *}"
        [ -e "$rn" ] && continue
        echo "$j"
        "$func" "$j" > "$rn" &
    done
done
